{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","countryInfo","setCountryInfo","date","Date","updated","formattedDate","Moment","format","console","log","useEffect","fetch","then","response","json","data","className","country","src","alt","numeral","cases","totalDeaths","recovered","todayCases","todayDeaths","todayRecovered","population","tests","active","critical","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gQAyEeA,MAnEf,WAAgB,IAAD,EAEyBC,mBAAS,IAFlC,mBAENC,EAFM,KAEOC,EAFP,KAIPC,EAAOC,KAAKH,EAAYI,SACxBC,EAAgBC,IAAOJ,GAAMK,OAAO,2BAe1C,OAbAC,QAAQC,IAAIJ,GAEZK,qBAAU,WACRC,MAAM,oDACLC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACLd,EAAec,GACfP,QAAQC,IAAIM,QAEb,IAEHP,QAAQC,IAAIT,EAAYI,SAGtB,sBAAKY,UAAU,MAAf,UACE,sBAAKA,UAAU,QAAf,UACE,iDAAoBhB,EAAYiB,WAChC,qBAAKC,IAAI,6CAA6CC,IAAI,KAC1D,gDAAmBd,QAKrB,wBAAOW,UAAU,QAAjB,UACE,+BACE,6BAAI,+CACJ,6BAAI,gDACJ,6BAAI,oDAGN,+BACE,oBAAIA,UAAU,aAAd,SACE,+BACE,+CAAkBI,IAAQpB,EAAYqB,OAAOd,OAAO,UACpD,gDAAmBa,IAAQpB,EAAYsB,aAAaf,OAAO,UAC3D,mDAAsBa,IAAQpB,EAAYuB,WAAWhB,OAAO,eAIhE,oBAAIS,UAAU,aAAd,SACE,+BACE,gDAAmBI,IAAQpB,EAAYwB,YAAYjB,OAAO,UAC1D,iDAAoBa,IAAQpB,EAAYyB,aAAalB,OAAO,UAC5D,oDAAuBa,IAAQpB,EAAY0B,gBAAgBnB,OAAO,eAItE,oBAAIS,UAAU,eAAd,SACE,+BACE,8CAAiBI,IAAQpB,EAAY2B,YAAYpB,OAAO,UACxD,+CAAkBa,IAAQpB,EAAY4B,OAAOrB,OAAO,UACpD,gDAAkB,iCAASa,IAAQpB,EAAY6B,QAAQtB,OAAO,YAC9D,yDAA2B,iCAASa,IAAQpB,EAAY8B,UAAUvB,OAAO,2BCrDtEwB,EAZO,SAAAC,GAChBA,GAAeA,aAAuBC,UACxC,6BAAqBrB,MAAK,YAAkD,IAA/CsB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDhBO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.79c336a8.chunk.js","sourcesContent":["import React,{useEffect, useState} from \"react\";\nimport numeral from 'numeral';\nimport Moment from 'moment';\nimport \"./App.css\";\n\n\nfunction App() {\n\n  const [countryInfo, setCountryInfo] = useState({});\n  \n  const date = Date(countryInfo.updated);\n  const formattedDate = Moment(date).format('Do MMMM YYYY, h:mm:ss a'); \n\n  console.log(formattedDate);\n\n  useEffect(() => {\n    fetch('https://disease.sh/v3/covid-19/countries/ireland')\n    .then((response) => response.json())\n    .then((data) => {\n      setCountryInfo(data);\n      console.log(data);\n    });\n  }, []);\n\n  console.log(countryInfo.updated);\n\n  return (\n    <div className=\"App\">\n      <div className=\"title\">\n        <h1>Covid-19 Stats {countryInfo.country}</h1>\n        <img src=\"https://disease.sh/assets/img/flags/ie.png\" alt=\"\"/>\n        <h4>Last Updated: {formattedDate}</h4>\n\n        {/* <img src={countryInfo.countryInfo.flag}/> */}\n        \n      </div>\n      <table className=\"stats\">\n        <tr>\n          <td><h3>Total Stats</h3></td>\n          <td><h3>Todays Stats</h3></td>\n          <td><h3>Overall Stats</h3></td>\n        </tr>\n\n        <tr>\n          <td className=\"totalStats\">\n            <ul>\n              <li>Total Cases: {numeral(countryInfo.cases).format(\"0,0\")}</li>\n              <li>Total Deaths: {numeral(countryInfo.totalDeaths).format(\"0,0\")}</li>\n              <li>Total Recovered: {numeral(countryInfo.recovered).format(\"0,0\")}</li>\n            </ul>\n          </td>\n\n          <td className=\"dailyStats\">\n            <ul>\n              <li>Todays Cases: {numeral(countryInfo.todayCases).format(\"0,0\")}</li>\n              <li>Todays Deaths: {numeral(countryInfo.todayDeaths).format(\"0,0\")}</li>\n              <li>Todays Recovered: {numeral(countryInfo.todayRecovered).format(\"0,0\")}</li>\n            </ul>\n          </td>\n\n          <td className=\"overallStats\">\n            <ul>\n              <li>Population: {numeral(countryInfo.population).format(\"0,0\")}</li>\n              <li>Total Tests: {numeral(countryInfo.tests).format(\"0,0\")}</li>\n              <li>Active Cases: <strong>{numeral(countryInfo.active).format(\"0,0\")}</strong></li>\n              <li>of which are critical: <strong>{numeral(countryInfo.critical).format(\"0,0\")}</strong></li>\n            </ul>\n          </td>\n        </tr>\n      </table>\n    </div>\n  );\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\r\n    if (onPerfEntry && onPerfEntry instanceof Function) {\r\n      import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n        getCLS(onPerfEntry);\r\n        getFID(onPerfEntry);\r\n        getFCP(onPerfEntry);\r\n        getLCP(onPerfEntry);\r\n        getTTFB(onPerfEntry);\r\n      });\r\n    }\r\n  };\r\n  \r\n  export default reportWebVitals;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}