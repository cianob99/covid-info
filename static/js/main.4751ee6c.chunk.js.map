{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","countryInfo","setCountryInfo","date","Date","updated","formattedDate","Moment","format","console","log","useEffect","fetch","then","response","json","data","deaths","className","country","src","flag","numeral","cases","recovered","todayCases","todayDeaths","todayRecovered","population","tests","active","critical","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sQAuEeA,MAhEf,WAAgB,IAAD,EAEyBC,mBAAS,IAFlC,mBAENC,EAFM,KAEOC,EAFP,KAIPC,EAAOC,KAAKH,EAAYI,SACxBC,EAAgBC,IAAOJ,GAAMK,OAAO,yBAe1C,OAbAC,QAAQC,IAAIJ,GAEZK,qBAAU,WACRC,MAAM,oDACLC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACLd,EAAec,GACfP,QAAQC,IAAIM,QAEb,IAEHP,QAAQC,IAAIT,EAAYgB,QAGtB,sBAAKC,UAAU,MAAf,UACE,sBAAKA,UAAU,QAAf,UACE,iDAAoBjB,EAAYkB,WAChC,qBAAKC,IAAKnB,EAAYA,YAAYoB,UAKpC,sBAAKH,UAAU,QAAf,UACE,sBAAKA,UAAU,aAAf,UACA,6CACE,+BACE,yCAAYI,IAAQrB,EAAYsB,OAAOf,OAAO,UAC9C,0CAAac,IAAQrB,EAAYgB,QAAQT,OAAO,UAChD,6CAAgBc,IAAQrB,EAAYuB,WAAWhB,OAAO,gBAI1D,sBAAKU,UAAU,aAAf,UACA,8CACE,+BACE,yCAAYI,IAAQrB,EAAYwB,YAAYjB,OAAO,UACnD,0CAAac,IAAQrB,EAAYyB,aAAalB,OAAO,UACrD,6CAAgBc,IAAQrB,EAAY0B,gBAAgBnB,OAAO,gBAI/D,sBAAKU,UAAU,eAAf,UACA,+CACE,+BACE,8CAAiBI,IAAQrB,EAAY2B,YAAYpB,OAAO,UACxD,+CAAkBc,IAAQrB,EAAY4B,OAAOrB,OAAO,UACpD,gDAAkB,iCAASc,IAAQrB,EAAY6B,QAAQtB,OAAO,YAC9D,yDAA2B,iCAASc,IAAQrB,EAAY8B,UAAUvB,OAAO,qBAI/E,iCACE,gDAAmBF,WCtDV0B,EAZO,SAAAC,GAChBA,GAAeA,aAAuBC,UACxC,6BAAqBrB,MAAK,YAAkD,IAA/CsB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDhBO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.4751ee6c.chunk.js","sourcesContent":["import React,{useEffect, useState} from \"react\";\nimport numeral from 'numeral';\nimport Moment from 'moment';\nimport CountUp from 'react-countup';\nimport \"./App.css\";\n\n\nfunction App() {\n\n  const [countryInfo, setCountryInfo] = useState({});\n  \n  const date = Date(countryInfo.updated);\n  const formattedDate = Moment(date).format('Do MMMM YYYY h:mm:ssa'); \n\n  console.log(formattedDate);\n\n  useEffect(() => {\n    fetch('https://disease.sh/v3/covid-19/countries/ireland')\n    .then((response) => response.json())\n    .then((data) => {\n      setCountryInfo(data);\n      console.log(data);\n    });\n  }, []);\n\n  console.log(countryInfo.deaths);\n\n  return (\n    <div className=\"App\">\n      <div className=\"title\">\n        <h1>Covid-19 Stats {countryInfo.country}</h1>\n        <img src={countryInfo.countryInfo.flag}/>\n        {/* <img src=\"https://disease.sh/assets/img/flags/ie.png\" alt=\"\"/> */}\n        {/* <img src={countryInfo.countryInfo.flag}/> */} \n      </div>\n\n      <div className=\"stats\">\n        <div className=\"totalStats\">\n        <h3>Total Stats</h3>\n          <ul>\n            <li>Cases: {numeral(countryInfo.cases).format(\"0,0\")}</li>\n            <li>Deaths: {numeral(countryInfo.deaths).format(\"0,0\")}</li>\n            <li>Recovered: {numeral(countryInfo.recovered).format(\"0,0\")}</li>\n          </ul>\n        </div>\n\n        <div className=\"dailyStats\">\n        <h3>Todays Stats</h3>\n          <ul>\n            <li>Cases: {numeral(countryInfo.todayCases).format(\"0,0\")}</li>\n            <li>Deaths: {numeral(countryInfo.todayDeaths).format(\"0,0\")}</li>\n            <li>Recovered: {numeral(countryInfo.todayRecovered).format(\"0,0\")}</li>\n          </ul>\n        </div>\n\n        <div className=\"overallStats\">\n        <h3>Overall Stats</h3>\n          <ul>\n            <li>Population: {numeral(countryInfo.population).format(\"0,0\")}</li>\n            <li>Total Tests: {numeral(countryInfo.tests).format(\"0,0\")}</li>\n            <li>Active Cases: <strong>{numeral(countryInfo.active).format(\"0,0\")}</strong></li>\n            <li>of which are critical: <strong>{numeral(countryInfo.critical).format(\"0,0\")}</strong></li>\n          </ul>\n        </div>\n      </div>\n      <footer>\n        <h4>Last Updated: {formattedDate}</h4>\n      </footer>\n    </div>\n  );\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\r\n    if (onPerfEntry && onPerfEntry instanceof Function) {\r\n      import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n        getCLS(onPerfEntry);\r\n        getFID(onPerfEntry);\r\n        getFCP(onPerfEntry);\r\n        getLCP(onPerfEntry);\r\n        getTTFB(onPerfEntry);\r\n      });\r\n    }\r\n  };\r\n  \r\n  export default reportWebVitals;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}