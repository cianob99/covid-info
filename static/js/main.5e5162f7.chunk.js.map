{"version":3,"sources":["countryInfo.js","countryList.js","App.js","reportWebVitals.js","index.js"],"names":["CountryInfo","match","useEffect","fetchInfo","console","log","useState","info","setInfo","a","fetch","params","country","data","json","date","Date","updated","formattedDate","Moment","format","className","href","numeral","cases","deaths","recovered","todayCases","todayDeaths","todayRecovered","population","tests","active","critical","CountryList","fetchList","list","setList","map","id","to","src","countryInfo","flag","App","path","exact","component","render","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"4SA2EeA,MAtEf,YAAiC,IAAVC,EAAS,EAATA,MAGnBC,qBAAU,WACNC,IACAC,QAAQC,IAAIJ,KACb,IANyB,MAQJK,mBAAS,IARL,mBAQrBC,EARqB,KAQfC,EARe,KAUtBL,EAAS,uCAAG,8BAAAM,EAAA,sEACKC,MAAM,4CAAD,OACwBT,EAAMU,OAAOC,UAF/C,cACRC,EADQ,gBAKKA,EAAKC,OALV,OAKRP,EALQ,OAMdH,QAAQC,IAAIE,GACZC,EAAQD,GAPM,2CAAH,qDAUTQ,EAAOC,KAAKT,EAAKU,SACjBC,EAAgBC,IAAOJ,GAAMK,OAAO,yBAG1C,OACA,sBAAKC,UAAU,aAAf,UACE,sBAAKA,UAAU,QAAf,UACE,iDAAoBd,EAAKK,WACzB,6BAAI,mBAAGU,KAAK,IAAR,wCACJ,gDAAmBJ,QAKrB,sBAAKG,UAAU,QAAf,UACE,sBAAKA,UAAU,aAAf,UACA,6CACE,+BACE,yCAAYE,IAAQhB,EAAKiB,OAAOJ,OAAO,UACvC,0CAAaG,IAAQhB,EAAKkB,QAAQL,OAAO,UACzC,6CAAgBG,IAAQhB,EAAKmB,WAAWN,OAAO,gBAInD,sBAAKC,UAAU,aAAf,UACA,8CACE,+BACE,yCAAYE,IAAQhB,EAAKoB,YAAYP,OAAO,UAC5C,0CAAaG,IAAQhB,EAAKqB,aAAaR,OAAO,UAC9C,6CAAgBG,IAAQhB,EAAKsB,gBAAgBT,OAAO,gBAIxD,sBAAKC,UAAU,eAAf,UACA,+CACE,+BACE,8CAAiBE,IAAQhB,EAAKuB,YAAYV,OAAO,UACjD,+CAAkBG,IAAQhB,EAAKwB,OAAOX,OAAO,UAC7C,gDAAkB,iCAASG,IAAQhB,EAAKyB,QAAQZ,OAAO,YACvD,yDAA2B,iCAASG,IAAQhB,EAAK0B,UAAUb,OAAO,qBAIxE,iCACE,gDAAmBF,WC9BZgB,MApCf,WAEIhC,qBAAU,WACNiC,MACD,IAJgB,MAMK7B,mBAAS,IANd,mBAMZ8B,EANY,KAMNC,EANM,KAQbF,EAAS,uCAAG,8BAAA1B,EAAA,sEACKC,MACf,6GAFU,cACRG,EADQ,gBAKKA,EAAKC,OALV,OAKRsB,EALQ,OAMdhC,QAAQC,IAAI+B,GACZC,EAAQD,GAPM,2CAAH,qDAUf,OACI,sBAAKf,UAAU,cAAf,UACI,gDACA,kDAEKe,EAAKE,KAAI,SAAAF,GAAI,OACV,sBAAwBG,GAAG,cAAclB,UAAWe,EAAKxB,QAAzD,UACI,cAAC,IAAD,CAAM4B,GAAE,WAAMJ,EAAKxB,SAAnB,SACA,qBAAK6B,IAAKL,EAAKM,YAAYC,SAE3B,6BAAKP,EAAKxB,YAJJwB,EAAKxB,gBCGpBgC,MAxBf,WAGE,OACE,cAAC,IAAD,UACE,qBAAKvB,UAAU,MAAf,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOwB,KAAK,IAAIC,OAAK,EAACC,UAAWb,IACjC,cAAC,IAAD,CAAOW,KAAK,YAAYE,UAAW/C,IACnC,cAAC,IAAD,CAAO6C,KAAK,IAAIG,OAAQ,kBACtB,gCACE,4CACA,gDACA,6BAAI,mBAAG1B,KAAK,IAAR,qCCPD2B,EAZO,SAAAC,GAChBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDhBQ,IAASV,OACP,cAAC,IAAMW,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.5e5162f7.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport numeral from 'numeral';\r\nimport Moment from 'moment';\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction CountryInfo({ match }) {\r\n\r\n    \r\n    useEffect(() => {\r\n        fetchInfo();\r\n        console.log(match);\r\n    }, []);\r\n\r\n    const [info, setInfo] = useState([]);\r\n\r\n    const fetchInfo = async () => {\r\n        const data = await fetch(\r\n            `https://disease.sh/v3/covid-19/countries/${match.params.country}`\r\n        );\r\n\r\n        const info = await data.json();\r\n        console.log(info);\r\n        setInfo(info);\r\n    };\r\n\r\n    const date = Date(info.updated);\r\n    const formattedDate = Moment(date).format('Do MMMM YYYY h:mm:ssa'); \r\n\r\n\r\n    return (\r\n    <div className=\"CountyInfo\">\r\n      <div className=\"title\">\r\n        <h1>Covid-19 Stats {info.country}</h1>\r\n        <h3><a href=\"/\">Back to Country Selecion</a></h3>\r\n        <h4>Last Updated: {formattedDate}</h4>\r\n        {/* <img src=\"https://disease.sh/assets/img/flags/ie.png\" alt=\"\"/> */}\r\n        {/* <img src={countryInfo.countryInfo.flag}/> */}\r\n      </div>\r\n\r\n      <div className=\"stats\">\r\n        <div className=\"totalStats\">\r\n        <h3>Total Stats</h3>\r\n          <ul>\r\n            <li>Cases: {numeral(info.cases).format(\"0,0\")}</li>\r\n            <li>Deaths: {numeral(info.deaths).format(\"0,0\")}</li>\r\n            <li>Recovered: {numeral(info.recovered).format(\"0,0\")}</li>\r\n          </ul>\r\n        </div>\r\n\r\n        <div className=\"dailyStats\">\r\n        <h3>Todays Stats</h3>\r\n          <ul>\r\n            <li>Cases: {numeral(info.todayCases).format(\"0,0\")}</li>\r\n            <li>Deaths: {numeral(info.todayDeaths).format(\"0,0\")}</li>\r\n            <li>Recovered: {numeral(info.todayRecovered).format(\"0,0\")}</li>\r\n          </ul>\r\n        </div>\r\n\r\n        <div className=\"overallStats\">\r\n        <h3>Overall Stats</h3>\r\n          <ul>\r\n            <li>Population: {numeral(info.population).format(\"0,0\")}</li>\r\n            <li>Total Tests: {numeral(info.tests).format(\"0,0\")}</li>\r\n            <li>Active Cases: <strong>{numeral(info.active).format(\"0,0\")}</strong></li>\r\n            <li>of which are critical: <strong>{numeral(info.critical).format(\"0,0\")}</strong></li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n      <footer>\r\n        <h4>Last Updated: {formattedDate}</h4>\r\n      </footer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CountryInfo;","import React, { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction CountryList() {\r\n\r\n    useEffect(() => {\r\n        fetchList();\r\n    }, []);\r\n\r\n    const [list, setList] = useState([]);\r\n\r\n    const fetchList = async () => {\r\n        const data = await fetch(\r\n            'https://disease.sh/v3/covid-19/countries/ireland,uk,usa,france,germany,poland,australia,new zealand,china'\r\n        );\r\n      \r\n        const list = await data.json();\r\n        console.log(list);\r\n        setList(list);\r\n    };\r\n\r\n    return (\r\n        <div className='countryList'>\r\n            <h1>Covid-19 Stats</h1>\r\n            <h2>Select a Country</h2>\r\n                \r\n                {list.map(list => (\r\n                    <div key={list.country} id='countryList' className={list.country}>\r\n                        <Link to={`/${list.country}`}>\r\n                        <img src={list.countryInfo.flag} />\r\n                        </Link>\r\n                        <h3>{list.country}</h3>\r\n                    </div>\r\n                ))}\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default CountryList;","import React, {useState, useEffect} from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport './App.css';\nimport CountryInfo from './countryInfo';\nimport CountryList from './countryList';\n\nfunction App() {\n\n\n  return (\n    <Router>\n      <div className='App'>\n        <Switch>\n          <Route path=\"/\" exact component={CountryList} />\n          <Route path=\"/:country\" component={CountryInfo} />\n          <Route path=\"/\" render={() => \n            <div>\n              <h1>Error: 404</h1>\n              <h2>Page Not Found</h2>\n              <h3><a href=\"/\">Go Back</a></h3>\n            </div>\n            } \n          />\n        </Switch>\n      </div>\n    </Router>\n  );\n  \n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n    if (onPerfEntry && onPerfEntry instanceof Function) {\r\n      import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n        getCLS(onPerfEntry);\r\n        getFID(onPerfEntry);\r\n        getFCP(onPerfEntry);\r\n        getLCP(onPerfEntry);\r\n        getTTFB(onPerfEntry);\r\n      });\r\n    }\r\n  };\r\n  \r\n  export default reportWebVitals;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}